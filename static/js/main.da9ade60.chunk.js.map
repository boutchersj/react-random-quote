{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","quotes","quote","author","index","Math","floor","random","newQuote","newAuthor","RandomQuote","props","react_default","a","createElement","children","element","className","src","logo","alt","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOA+EeA,0LAxEX,IAAMC,EAAS,CACb,CACEC,MAAO,6IACPC,OAAQ,gBAEV,CACED,MAAO,kJACPC,OAAQ,YAEV,CACED,MAAO,sHACPC,OAAQ,kBAEV,CACED,MAAO,oFACPC,OAAQ,iBAEV,CACED,MAAO,gIACPC,OAAQ,kBAEV,CACED,MAAO,gGACPC,OAAQ,iBAEV,CACED,MAAO,uHACPC,OAAQ,uBAEV,CACED,MAAO,0IACPC,OAAQ,eAEV,CACED,MAAO,0DACPC,OAAQ,sBAEV,CACED,MAAO,qJACPC,OAAQ,gBAINC,EAAQC,KAAKC,MAAoB,GAAdD,KAAKE,UACtBC,EAAWP,EAAOG,GAAOF,MACzBO,EAAY,KAAOR,EAAOG,GAAOD,OAEjCO,EAAc,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,WAAMH,EAAMI,WAEnCC,EACJJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,+BACbL,EAAAC,EAAAC,cAACJ,EAAD,KACGF,EACHI,EAAAC,EAAAC,cAACJ,EAAD,KACGD,KAKT,OACEG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCR,EAAAC,EAAAC,cAAA,KAAGO,GAAG,SACNL,YAnEQM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.da9ade60.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    const quotes = [\n      {\n        quote: '\"My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.\"',\n        author: 'Maya Angelou'\n      },\n      {\n        quote: '\"Passion is one great force that unleashes creativity, because if you\\'re passionate about something, then you\\'re more willing to take risks.\"',\n        author: 'Yo-Yo Ma'\n      },\n      {\n        quote: '\"Follow your passion, be prepared to work hard and sacrifice, and, above all, don\\'t let anyone limit your dreams.\"',\n        author: 'Donovan Bailey'\n      },\n      {\n        quote: '\"Passion is energy. Feel the power that comes from focusing on what excites you.\"',\n        author: 'Oprah Winfrey'\n      },\n      {\n        quote: '\"There is no passion to be found playing small - in settling for a life that is less than the one you are capable of living.\"',\n        author: 'Nelson Mandela'\n      },\n      {\n        quote: '\"You can do anything as long as you have the passion, the drive, the focus, and the support.\"',\n        author: 'Sabrina Bryan'\n      },\n      {\n        quote: '\"Passion is what gets you through the hardest times that might otherwise make strong men weak, or make you give up.\"',\n        author: 'Neil deGrasse Tyson'\n      },\n      {\n        quote: '\"I believe that education is all about being excited about something. Seeing passion and enthusiasm helps push an educational message.\"',\n        author: 'Steve Irwin'\n      },\n      {\n        quote: '\"Once something is a passion, the motivation is there.\"',\n        author: 'Michael Schumacher'\n      },\n      {\n        quote: '\"If you feel like there\\'s something out there that you\\'re supposed to be doing, if you have a passion for it, then stop wishing and just do it.\"',\n        author: 'Wanda Sykes'\n      }\n      ];\n\n      let index = Math.floor(Math.random()*10);\n      const newQuote = quotes[index].quote;\n      const newAuthor = \"--\" + quotes[index].author;\n\n      const RandomQuote = props => <div>{props.children}</div>\n\n      const element = \n        <div className='container-fluid text-center'>\n          <RandomQuote>\n            {newQuote}\n          <RandomQuote>\n            {newAuthor}\n          </RandomQuote>\n          </RandomQuote>\n        </div>\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <p id='quote'>\n         {element}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}